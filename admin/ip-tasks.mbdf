{% from "common/admin.njk" import show_admin_page, show_project_summary_lead with context %}
{% from "common/macros.njk" import embed_topic, thumb, timing_badge with context %}

{#====================================================================================================================#}
{% macro learn_about_the_project(number) %}
#### {{ thumb(number) }} Learn about the project

* **Read the following two sections**, if you haven't done so already:

{{ embed_topic("ip-overview.md#main", "Admin " + icon_embedding + " **iP - Overview**", "3", indent="2") }}
{{ embed_topic("ip-grading.md#main", "Admin " + icon_embedding + " **iP - Grading**", "1", indent="2") }}
{% endmacro %}
{#====================================================================================================================#}
{% macro set_up_prerequisites(number) %}
#### {{ thumb(number) }} Set up prerequisites

* **Ensure you have followed the <span class="pr-1 pl-1" style="color:purple; border: 0.5px solid lightgrey">:fas-hard-hat: Preparation</span> sections of the following module tools:**

{{ embed_topic("programmingLanguages.md#main", "Admin " + icon_embedding + " **Programming Language**", "2", indent="2") }}
{{ embed_topic("tools.md#rcs", "Admin " + icon_embedding + " **Tools → Git**", "2", indent="2") }}
{{ embed_topic("tools.md#github", "Admin " + icon_embedding + " Tools → **GitHub**", "2", indent="2") }}
{{ embed_topic("tools.md#ide", "Admin " + icon_embedding + " Tools → **Intellij IDEA**", "2", indent="2") }}
{% endmacro %}
{#====================================================================================================================#}
{% macro set_up_project(number) %}
#### {{ thumb(number) }} Set up the project in your computer

1. Fork [{{ module_org }}/duke]({{ module_org }}/duke).
1.  ==Enable the issue tracker of your fork== (Go to `Settings` of your fork, scroll to the `Features` section, and tick the `Issues` checkbox). %%Reason: our bots will be posting your weekly progress reports on the issue tracker of your fork.%%<br>
    {{ icon_tip }} If the issue tracker is enabled, you should be able to visit the following URL `https://github.com/{your_user_name}/duke/issues` e.g., `https://github.com/johnDoe/duke/issues`
1. Clone the fork onto your computer.
1. Set up the project in your IDE as explained in [the README file]({{ module_org }}/duke/blob/master/README.md).<br>
   {{ icon_tip }} If you are somewhat familiar with build tools such as Gradle, you are free to go ahead and start using Gradle from the beginning by following [the Gradle tutorial]({{ module_org }}/duke/blob/master/tutorials/gradleTutorial.md).
{% endmacro %}
{#====================================================================================================================#}
{% macro implement_increments(number) %}
#### {{ thumb(number) }} Implement increments while committing code frequently

Implement the following <tooltip content="in this context, an _increment_ is a Duke _level_ or a Duke _extension_">increments</tooltip> ==in the given order==.
   * Commit code at important points. ==Minimally, commit after completing each increment==.
   * After completing each increment,
     * **`git tag`** the commit with the exact increment ID e.g., `Level-2`, `A-TextUiTesting`
     * **`git push`** the code to your fork ({{ icon_tip }} git doesn't push tags unless you specifically ask it to)

<box>

{{ icon_important_big_red }} We discourage you from doing project tasks allocated to future weeks. Reasons:
1. In order to help you gain <tooltip content="the ability to apply knowledge or do tasks effortlessly as if you have been doing them for a long time">_fluency_</tooltip> (and also to better simulate real projects), **we want the project work to be <tooltip content="done at multiple times with time gaps in between">_spaced_</tooltip> and spread over a longer period**, rather than to be done as a short burst. Reminder: as per iP grading criteria, _some_ increments need to to be done in each week for you to get full marks.
1. As a further incentive to not jump ahead, we have left some future project requirements unspecified, and we might change some requirements along the way too.
</box>

<include src="dukeFragment.md" boilerplate var-header="**`Level-1`: Greet, Echo, Exit**" var-fragment="text.md#level1" />
<include src="dukeFragment.md" boilerplate var-header="**`Level-2`: Add, List**" var-fragment="text.md#level2" />
<include src="dukeFragment.md" boilerplate var-header="**`Level-3`: Mark as Done**" var-fragment="text.md#level3" />
<include src="dukeFragment.md" boilerplate var-header="**`Level-4`: ToDo, Event, Deadline**" var-fragment="text.md#level4" />
<include src="dukeFragment.md" boilerplate var-header="**`A-TextUiTesting`: Text UI Testing**" var-tag="optional" var-fragment="extensions.mbdf#A-TextUiTesting" />
<include src="dukeFragment.md" boilerplate var-header="**`Level-5`: Handle Errors**" var-fragment="text.md#level5" />
<include src="dukeFragment.md" boilerplate var-header="**`Level-6`: Delete**" var-fragment="text.md#level6" />
<include src="dukeFragment.md" boilerplate var-header="**`A-Enums`: Enums**" var-tag="if-applicable" var-fragment="extensions.mbdf#A-Enums" />

<p/>
{% endmacro %}
{#====================================================================================================================#}
{% macro fininsh_leftover_tasks(number) %}
#### {{ thumb(number) }} Do any leftover iP tasks from the previous week

* Remember to do any leftover increments from the past weeks before starting on the current week's increments. This guideline applies to future weeks too.
{% endmacro %}
{#====================================================================================================================#}
{% macro create_pr_to_upstream(number) %}
#### {{ thumb(number) }} Create a PR to the upstream repo

* Create a pull request (PR) from the `master` branch of your fork to the upstream repo.
  * PR name: `[{Your name}] Duke Increments` e.g., `[John Doe] Duke Increments` %%If you are reluctant to give full name, you may give the first half of your name only%%
{% endmacro %}
{#====================================================================================================================#}
{% macro do_as_parallel_branches(number) %}
#### {{ thumb(number) }} Do as parallel branches: `Level-7` and `Level-8`

Do Level 7 in a branch named `branch-Level-7`. Without merging that branch, go back to the `master` branch and implement Level 8 in a separate branch named `branch-Level-8`. Now, go back to the `master` branch and merge the two branches one after the other. As before, tag the commit (in the `master` branch, after merging) that achieves the respective deliverable, and push to your fork.<br>
 {{ icon_important_big_red }} Remember to push the branches to your fork so that the bot can detect them.<br>
 {{ icon_important_big_red }} Advanced git users: do not delete the branch after merging.<br>
 {{ icon_tip }} Merge without a _fast-forward_ so that git creates a separate commit for the merge.

<include src="dukeFragment.md" boilerplate var-header="**`Level-7`: Save**" var-fragment="text.md#level7" />
<include src="dukeFragment.md" boilerplate var-header="**`Level-8`: Dates and Times**" var-fragment="text.md#level8" />

<p/>
{% endmacro %}
{#====================================================================================================================#}
